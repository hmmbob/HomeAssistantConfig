##############################
## Freezer door alert helper #
##############################
- binary_sensor:
    - name: "Alert Freezer Door"
      unique_id: alert_freezer_door
      delay_on: "00:05:00"
      state: >-
        {{ is_state('binary_sensor.door_sensor_1_contact', 'on')
          and is_state('input_boolean.notify_door_alert', 'on') }}

##############################
## Front door alert helper   #
##############################
- binary_sensor:
    - name: "Alert Front Door"
      unique_id: alert_front_door
      delay_on: "00:05:00"
      state: >-
        {{ is_state('binary_sensor.door_sensor_2_contact', 'on')
          and is_state('input_boolean.notify_door_alert', 'on') }}

##############################
## Night template sensors   #
##############################
- sensor:
    - name: "Nightstate"
      state: "{% if is_state('sun.sun', 'below_horizon') %}1{% else %}0{% endif %}"

##############################
## Picnic time sensors       #
##############################
- sensor:
    - name: "Picnic last order ETA start time"
      unique_id: picnic_last_order_eta_start_time
      state: >-
        {% if is_state("sensor.picnic_last_order_eta_start", "unknown") %} 
          unknown 
        {% else %}
          {{ as_timestamp(states("sensor.picnic_last_order_eta_start"), 0) | timestamp_custom("%H:%M", "00:00") }}
        {% endif %}

    - name: "Picnic last order ETA end time"
      unique_id: picnic_last_order_eta_end_time
      state: >-
        {% if is_state("sensor.picnic_last_order_eta_end", "unknown") %} 
          unknown 
        {% else %}
          {{ as_timestamp(states("sensor.picnic_last_order_eta_end"), 0) | timestamp_custom("%H:%M", "00:00") }}
        {% endif %}

    - name: "Picnic last order max order time only"
      unique_id: picnic_last_order_max_order_time_only
      state: >-
        {% if is_state("sensor.picnic_last_order_max_order_time", "unknown") %} 
          unknown 
        {% else %}
          {{ as_timestamp(states("sensor.picnic_last_order_max_order_time"), 0) | timestamp_custom("%H:%M", "00:00") }}
        {% endif %}

##############################
## Room temperature          #
##############################
- sensor:
    - name: "Kamertemperatuur"
      unit_of_measurement: "Â°C"
      state: "{{ state_attr('climate.woonkamer', 'current_temperature')}}"
      device_class: temperature

##############################
## UV Alert helper           #
##############################
- binary_sensor:
    - name: "UV index Warning level"
      unique_id: "uv_index_warning_level"
      state: "{{ states('sensor.dark_sky_uv_index')| float > 5.9 }}"

##############################
## Vacuum template sensors   #
##############################
- sensor:
    - name: "Vacuum status"
      unique_id: "vacuum_status"
      state: '{{ state_attr("vacuum.rocky", "status") }}'
      icon: mdi:list-status

    - name: "Vacuum error"
      unique_id: "vacuum_error"
      icon: mdi:alert-circle
      state: >-
        {% if states("vacuum.rocky") == "error" %}
          {{ state_attr("vacuum.rocky", "error") }}
        {% else %}
          No error
        {% endif %}

    - name: "Vacuum battery"
      unique_id: "vacuum_battery"
      state: '{{ state_attr("vacuum.rocky", "battery_level") }}'
      device_class: "battery"
      unit_of_measurement: "%"
      icon: >-
        {% set battery_level = states('sensor.vacuum_battery')|int(default=0) %}
        {% set battery_round = (battery_level / 10)|int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

#####################################
## Pubercave power helper for stats #
#####################################
- binary_sensor:
    - name: "Is pubercave on"
      unique_id: is_pubercave_on
      state: "{{ states('sensor.pubercave_power') | int(default=0) > 80 }}"
