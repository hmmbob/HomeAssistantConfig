ev_package:
  input_number:
    ev_target_soc:
      name: EV Target SOC
      min: 0
      max: 100
      step: 5
      unit_of_measurement: "%"

  utility_meter:
    ev_charged_energy:
      cycle: monthly
      name: SmartEVSE Monthly total
      source: sensor.smartevse_6360_evtotalenergycharged
      always_available: true

  template:
    - trigger:
        # This generates triggers for all changes in the entity, both in its state and its attributes.
        - trigger: state
          entity_id: sensor.zonneplan_current_electricity_tariff
        # This ensures the first data is filled.
        - trigger: event
          event_type: event_template_reloaded
      sensor:
        - name: "Zonneplan template price sensor"
          unique_id: zonneplan_template_price_sensor
          unit_of_measurement: "â‚¬/kWh"
          state: "{{ states('sensor.zonneplan_current_electricity_tariff') }}"
          availability: "{{ 'sensor.zonneplan_current_electricity_tariff' | has_value }}"
          attributes:
            prices_today: >
              {%- set forecast = state_attr('sensor.zonneplan_current_electricity_tariff', 'forecast') %}
              {%- set time_key = 'datetime' %}
              {%- set price_key = 'electricity_price' %}
              {%- set ns = namespace(data=[]) %}
              {%- for i in forecast | default([], true) if as_local(as_datetime(i[time_key])).date() == now().date() %}
                {%- set ns.data = ns.data + [dict(time= as_local(as_datetime(i[time_key])).isoformat(), price = i[price_key] / 10000000 )] %}
              {%- endfor %}
              {{ ns.data }}
            prices_tomorrow: >
              {%- set forecast = state_attr('sensor.zonneplan_current_electricity_tariff', 'forecast') %}
              {%- set time_key = 'datetime' %}
              {%- set price_key = 'electricity_price' %}
              {%- set ns = namespace(data=[]) %}
              {%- for i in forecast | default([], true) if as_local(as_datetime(i[time_key])).date() == (now()+timedelta(days=1)).date() %}
                {%- set ns.data = ns.data + [dict(time= as_local(as_datetime(i[time_key])).isoformat(), price = i[price_key] / 10000000 )] %}
              {%- endfor %}
              {{ ns.data }}

  automation:
    - id: ev_handle_automatic_cheapest_charge
      alias: "Laad de auto tijdens de goedkoopste uren"
      description: "Automatically charge my car in the cheapest hours"
      mode: single
      triggers:
        - trigger: state
          entity_id: sensor.ev_smart_charging_charging
          to: "on"
          id: ev_cheapest_charge_start
        - trigger: state
          entity_id: sensor.ev_smart_charging_charging
          to: "off"
          id: ev_cheapest_charge_stop
      actions:
        - alias: "Choose to start or stop charging"
          choose:
            - conditions:
                - condition: trigger
                  id: ev_cheapest_charge_start
                - not:
                    - condition: state
                      entity_id: select.smartevse_6360_mode
                      state: "Smart"
              sequence:
                - alias: "Select SMART charging option"
                  action: select.select_option
                  target:
                    entity_id: select.smartevse_6360_mode
                  data:
                    option: Smart
                - alias: "Sending push notification"
                  action: notify.mobile_app_sm_a556b
                  data:
                    title: "Automatic cheapest EV charging started"
                    message: "Automatisch laden van de auto is gestart. ({{ now().strftime('%H:%M') }})."
                    data:
                      notification_icon: mdi:ev-station
                      ttl: 0
                      priority: high
                      clickAction: "/lovelace/car"
            - conditions:
                - condition: trigger
                  id: ev_cheapest_charge_stop
                - not:
                    - condition: state
                      entity_id: select.smartevse_6360_mode
                      state: "Off"
              sequence:
                - alias: "Select charging option OFF"
                  action: select.select_option
                  target:
                    entity_id: select.smartevse_6360_mode
                  data:
                    option: "Off"
                - alias: "Sending push notification"
                  action: notify.mobile_app_sm_a556b
                  data:
                    title: "Automatic cheapest EV charging stopped"
                    message: "Automatisch laden van de auto is gestopt ({{ now().strftime('%H:%M') }})"
                    data:
                      notification_icon: mdi:ev-station
                      ttl: 0
                      priority: high
                      clickAction: "/lovelace/car"

    - alias: "Stel in of de auto verbonden is"
      id: "ev_set_smart_charging_connected_sensor"
      description: "Set Smart Charging EV connected sensor"
      mode: single
      triggers:
        - trigger: state
          entity_id: sensor.smartevse_6360_evplugstate
      actions:
        - if:
            - condition: state
              entity_id: sensor.smartevse_6360_evplugstate
              state: "Connected"
          then:
            - action: switch.turn_on
              target:
                entity_id: switch.ev_smart_charging_ev_connected
          else:
            - if:
                - condition: state
                  entity_id: sensor.smartevse_6360_evplugstate
                  state: "Disconnected"
              then:
                - action: switch.turn_off
                  target:
                    entity_id: switch.ev_smart_charging_ev_connected

    - id: ev_create_monthly_total_notification
      alias: "Stuur een maandelijks overzicht van de laadkosten van de auto"
      description: "Create a monthly overview of the amount of energy charged for billing purposes"
      mode: single
      variables:
        title: EV charging monthly total
        message: >
          This month you have charged your EV with a total of {{ states('sensor.smartevse_monthly_total') | round(1) }} kWh. 
          The total meter reading at {{now().strftime("%d-%m-%Y %H:%M")}} was {{ states('sensor.smartevse_6360_evtotalenergycharged') | round(1) }} kWh.
      triggers:
        - trigger: time
          at: "23:59:45"
      conditions:
        - alias: "Only on last day of the month"
          condition: template
          value_template: "{{ (now() + timedelta(days=1)).strftime('%-d') == '1' }}"
      actions:
        - alias: "Create a persistant notification with the monthly charged totals"
          action: persistent_notification.create
          data:
            notification_id: ev_monthly_total
            title: "{{ title }}"
            message: "{{ message }}"
        - alias: "Send an email with the monthly charged totals"
          action: notify.email
          data:
            title: "{{ title }}"
            message: "{{ message }}"

    - id: ev_force_update_while_charging
      alias: "Forceer nieuwe Hyundai informatie tijdens het laden"
      description: "Force update the values of the Hyundai component while charging"
      mode: single
      triggers:
        - trigger: time_pattern
          minutes: "/15"
      conditions:
        - alias: "Only when we are actually charging"
          condition: state
          entity_id: sensor.smartevse_6360_state
          state: "Charging"
      actions:
        - action: kia_uvo.force_update
          data:
            device_id: 5a94e1b7fbce614053e4f5b8dfd6209b
